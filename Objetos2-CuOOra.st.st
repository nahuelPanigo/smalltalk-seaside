WAComponent subclass: #ContenidoComponent	instanceVariableNames: 'sistema usuario'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra-WebAplication'!!ContenidoComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!ContenidoComponent methodsFor: 'as yet unclassified' stamp: 'Anonymous 4/12/2019 18:22'!contenidoDe: unapregunta On: anhtmlcanvas	anhtmlcanvas heading		level: 5;		with: 'topicos: ' , (self cadenaDeTopicos: unapregunta topicos).self realizada:unapregunta Por:anhtmlcanvas .	self mostrarLikesYDislikes: anhtmlcanvas de: unapregunta.	anhtmlcanvas horizontalRule! !!ContenidoComponent methodsFor: 'rendering' stamp: 'Anonymous 4/14/2019 00:51'!mostrarLikesYDislikes: anhtmlcanvas de: unapregunta	anhtmlcanvas heading		level: 5;		with: ' con ' , unapregunta likes printString , ' likes ' , '| ' , unapregunta dislikes printString , ' dislikes '.	self interactuar: anhtmlcanvas de: unapregunta! !!ContenidoComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2019 18:16'!mostrarUsuarioLogueado:anhtmlcanvas	anhtmlcanvas space: 300.	anhtmlcanvas anchor		callback: [ self show: LoginComponent new ];					with: [ anhtmlcanvas button with: 'LogOut' ].	anhtmlcanvas space: 3.	anhtmlcanvas strong: usuario nombre.! !!ContenidoComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 14:02'!initialize super initialize .sistema:= SistemaCuOOra instance! !!ContenidoComponent methodsFor: 'rendering' stamp: 'Anonymous 4/14/2019 00:50'!interactuar: anhtmlcanvas de: unaInteraccion	anhtmlcanvas anchor		callback: [ sistema registrarLikeInteraccion: unaInteraccion delUsuario: usuario ];		with: '+ like  | '.	anhtmlcanvas anchor		callback: [ sistema registrarDislikeInteraccion: unaInteraccion delUsuario: usuario ];		with: ' + dislike'.	anhtmlcanvas horizontalRule.	anhtmlcanvas anchor		callback: [ sistema removerReaccionAInteraccion: unaInteraccion   DelUsuario: usuario ];		with: ' - remover reaccion'! !!ContenidoComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2019 18:15'!encabezado: anhtmlcanvas	anhtmlcanvas heading		level: 1;		with: 'CuOOra'.	anhtmlcanvas horizontalRule.	anhtmlcanvas anchor		callback: [ self show: (InicioComponent on: usuario) ];		with: [ anhtmlcanvas button with: 'home' ].! !!ContenidoComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2019 19:42'!usuario^usuario.! !!ContenidoComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2019 17:52'!cadenaDeTopicos: topicos"itera sobre la coleccion de topicos recibida como parametro, formando un string con los nombres de los mismos, y lo devuelve "	| cadena |	cadena := String new.	topicos do: [ :topico | cadena := cadena , '  ' , topico nombre ].	^ cadena! !!ContenidoComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2019 18:15'!renderContentOn: anhtmlcanvas	self encabezado: anhtmlcanvas.self mostrarUsuarioLogueado:anhtmlcanvas .	anhtmlcanvas break.	anhtmlcanvas break! !!ContenidoComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 17:53'!usuario:unUsuariousuario:=unUsuario .! !!ContenidoComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2019 18:23'!realizada:unapregunta Por:anhtmlcanvas	anhtmlcanvas text: 'realizada por '.	anhtmlcanvas anchor		callback: [ self verPerfilDe: unapregunta usuario ];		with: unapregunta usuario nombre.! !!ContenidoComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 17:29'!verPerfilDe: unUsuario	self show: (PerfilComponent on: unUsuario del: usuario)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ContenidoComponent class	instanceVariableNames: ''!!ContenidoComponent class methodsFor: 'as yet unclassified' stamp: 'Anonymous 4/11/2019 17:52'!loguearUsuario: unUsuario	^ self new usuario: unUsuario! !ContenidoComponent subclass: #InicioComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra-WebAplication'!!InicioComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!InicioComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 17:47'!verPregunta: unaPregunta	self show: (PreguntaComponent on: unaPregunta delUsuario: usuario)! !!InicioComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 14:05'!on: unUsuario 	usuario := unUsuario.	! !!InicioComponent methodsFor: 'rendering' stamp: 'Anonymous 4/6/2019 18:22'!contenidoDe: unapregunta on: anhtmlcanvasanhtmlcanvas break.anhtmlcanvas break.anhtmlcanvas text:	(unapregunta respuestas) size printString , ' respuestas'.	super contenidoDe:unapregunta   On:anhtmlcanvas . ! !!InicioComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2019 12:52'!renderAgregarPregunta:anhtmlcanvasanhtmlcanvas anchorcallback:[self newPregunta];with: [anhtmlcanvas button with:'agregar pregunta'].! !!InicioComponent methodsFor: 'rendering' stamp: 'Anonymous 4/5/2019 23:58'!renderPregunta: unapregunta On: anhtmlcanvas	anhtmlcanvas anchor		callback: [ self verPregunta: unapregunta ];		with: unapregunta titulo.	self contenidoDe: unapregunta on: anhtmlcanvas! !!InicioComponent methodsFor: 'rendering' stamp: 'Anonymous 4/13/2019 21:50'!renderContentOn: anHtmlCanvas	super renderContentOn: anHtmlCanvas.	self renderAgregarPregunta: anHtmlCanvas.	anHtmlCanvas heading		level: 2;		with: 'ultimas preguntas'.	(sistema obtenerPreguntasRelevantesPara: usuario)		do: [ :p | self renderPregunta: p On: anHtmlCanvas ]! !!InicioComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 17:28'!newPregunta	| nuePreg |	nuePreg := NuevaPreguntaComponent onNewPregunta: sistema delUsuario: usuario.	self call: nuePreg.	nuePreg pregunta ifNotNil: [ sistema addPregunta: nuePreg pregunta ]! !!InicioComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2019 18:58'!initializesuper initialize ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!InicioComponent class	instanceVariableNames: ''!!InicioComponent class methodsFor: 'initialization' stamp: 'Anonymous 4/11/2019 14:03'!on: unUsuario 	^ self new on: unUsuario ! !WAComponent subclass: #LoginComponent	instanceVariableNames: 'usuario nombre contraseña sistema'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra-WebAplication'!!LoginComponent commentStamp: 'Anonymous 4/13/2019 20:32' prior: 0!LoginComponent initialize .WAAdmin register: LoginComponent   asApplicationAt: 'CuOOra/Login'!!LoginComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 16:30'!guardarUsuario   usuario := UsuarioCuOOra conNombre:nombre  yContraseña:contraseña . 	! !!LoginComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 14:10'!initializesuper initialize .	sistema := SistemaCuOOra instance! !!LoginComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 18:27'!iniciarSesion:anhtmlcanvas	usuario := sistema validarUsuario: nombre y: contraseña.	usuario ifNotNil: [ self show: (InicioComponent on: usuario) ] ! !!LoginComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 10:36'!contraseña^contraseña ! !!LoginComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 14:24'!nombre^nombre .! !!LoginComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 10:36'!usuario^usuario! !!LoginComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 10:29'!renderContentOn:anhtmlcanvasanhtmlcanvas heading level:1 ; with: 'CuOOra'.self renderInputOn:anhtmlcanvas ! !!LoginComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 14:23'!nombre: unNombre	nombre := unNombre! !!LoginComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 18:19'!renderInputOn: anhtmlcanvas	anhtmlcanvas		form: [ anhtmlcanvas text: 'nombre de usuario: '.			anhtmlcanvas textInput on: #nombre of: self.			anhtmlcanvas break.			anhtmlcanvas text: 'contraseña: '.			anhtmlcanvas textInput on: #contraseña of: self.			anhtmlcanvas break.			anhtmlcanvas submitButton				callback: [ self iniciarSesion:anhtmlcanvas ];				value: 'iniciar sesion' ]! !!LoginComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 10:35'!contraseña:unaContraseñacontraseña :=unaContraseña ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LoginComponent class	instanceVariableNames: ''!!LoginComponent class methodsFor: 'initialization' stamp: 'Anonymous 4/11/2019 14:12'!initializeWAAdmin register: LoginComponent asApplicationAt: 'CuOOra/index'.! !ContenidoComponent subclass: #NuevaPreguntaComponent	instanceVariableNames: 'pregunta titulo descripcion topicos'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra-WebAplication'!!NuevaPreguntaComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2019 12:50'!titulo^titulo! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2019 13:00'!descripcion^descripcion ! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2019 19:46'!initialize	super initialize.! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2019 20:20'!save	pregunta titulo: titulo.	pregunta descripcion: descripcion.	pregunta usuario:usuario.	pregunta agregarTopicos:  topicos.	self answer! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 14:06'!on: unaPregunta 	pregunta := unaPregunta.	titulo := pregunta titulo.	descripcion := pregunta descripcion.	topicos := pregunta topicos! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2019 17:43'!obtenerTopicos: cadenaTopicos" este mensaje recibe los nombres de los topicos ingresados en la pagina como parametros y los transforma en una coleccion de topicos "	| nombreTopicos |	nombreTopicos := cadenaTopicos asString substrings: ','.	^ sistema obtenerTopicos: nombreTopicos! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2019 12:50'!titulo:unTitulotitulo:=unTitulo ! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2019 20:15'!renderContentOn:anhtmlcanvassuper renderContentOn: anhtmlcanvas .anhtmlcanvas headinglevel: 1;with: 'nueva pregunta'.anhtmlcanvas horizontalRule .self renderInput:anhtmlcanvas .! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2019 12:56'!pregunta^pregunta! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2019 18:09'!topicos: unosTopicos topicos := self obtenerTopicos: unosTopicos.^topicos! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2019 12:51'!topicos^topicos! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2019 12:48'!cancelpregunta :=nil.self answer .! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2019 17:45'!renderInput: anhtmlcanvas"formulario a mostrar en la pagina"	anhtmlcanvas		form: [ anhtmlcanvas text: 'titulo: '.			anhtmlcanvas textInput on: #titulo of: self.			anhtmlcanvas break.			anhtmlcanvas text: 'descripcion: '.			anhtmlcanvas textInput on: #descripcion of: self.			anhtmlcanvas break.			anhtmlcanvas text: 'topicos: '.			anhtmlcanvas textInput on: #topicos of: self.			anhtmlcanvas break.			anhtmlcanvas submitButton				callback: [ self save ];				value: 'save'.			anhtmlcanvas submitButton				callback: [ self cancel ];				value: 'cancel' ]! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/10/2019 13:00'!descripcion:unaDescripciondescripcion :=unaDescripcion  .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NuevaPreguntaComponent class	instanceVariableNames: ''!!NuevaPreguntaComponent class methodsFor: 'instance creation' stamp: 'Anonymous 4/11/2019 14:04'!on: unaPregunta delUsuario: unUsuario	^ (self loguearUsuario: unUsuario) on: unaPregunta ! !!NuevaPreguntaComponent class methodsFor: 'as yet unclassified' stamp: 'Anonymous 4/11/2019 17:37'!onNewPregunta: unsistema delUsuario: unUsuario	^ (self loguearUsuario: unUsuario)		on:			(Pregunta				delUsuario: unUsuario				conTitulo: 'some title'				DeLosTopicos: ''				conDescripcion: 'some description')	! !ContenidoComponent subclass: #PerfilComponent	instanceVariableNames: 'seguido'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra-WebAplication'!!PerfilComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PerfilComponent methodsFor: 'instance creation' stamp: 'Anonymous 4/14/2019 00:59'!verPregunta: unaPregunta	self show: (PreguntaComponent on: unaPregunta delUsuario: usuario)! !!PerfilComponent methodsFor: 'instance creation' stamp: 'Anonymous 4/11/2019 14:06'!on: unUsuario  del: usuarioLogueado	seguido := unUsuario.		usuario := usuarioLogueado! !!PerfilComponent methodsFor: 'instance creation' stamp: 'Anonymous 4/14/2019 00:58'!mostrarLasPreguntas: anhtmlcanvas	(sistema obtenerPreguntasDe: seguido) do: [ :preg | self renderPregunta:preg On:anhtmlcanvas ]! !!PerfilComponent methodsFor: 'instance creation' stamp: 'Anonymous 4/14/2019 00:59'!contenidoDe: unapregunta on: anhtmlcanvas	anhtmlcanvas break.	anhtmlcanvas break.	anhtmlcanvas text: unapregunta respuestas size printString , ' respuestas'.	super contenidoDe: unapregunta On: anhtmlcanvas! !!PerfilComponent methodsFor: 'instance creation' stamp: 'Anonymous 4/13/2019 15:15'!renderContentOn: anhtmlcanvas	super renderContentOn: anhtmlcanvas.	anhtmlcanvas heading		level: 1;		with: 'preguntas de ' , seguido nombre.	self validarSeguimiento:anhtmlcanvas .	anhtmlcanvas horizontalRule.	self mostrarLasPreguntas: anhtmlcanvas! !!PerfilComponent methodsFor: 'instance creation' stamp: 'Anonymous 4/13/2019 15:14'!validarSeguimiento:anhtmlcanvas	usuario nombre = seguido nombre		ifFalse: [ (sistema validarSeguidoresDe: usuario con: seguido)				ifTrue: [ anhtmlcanvas anchor						callback: [ sistema unUsuario: usuario dejarDeSeguirA: seguido ];						with: 'unFollow' ]				ifFalse: [ anhtmlcanvas anchor						callback: [ sistema unUsuario: usuario seguirA: seguido ];						with: 'follow' ] ].! !!PerfilComponent methodsFor: 'instance creation' stamp: 'Anonymous 4/14/2019 00:58'!renderPregunta: unapregunta On: anhtmlcanvas	anhtmlcanvas anchor		callback: [ self verPregunta: unapregunta ];		with: unapregunta titulo.	self contenidoDe: unapregunta on: anhtmlcanvas! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PerfilComponent class	instanceVariableNames: ''!!PerfilComponent class methodsFor: 'instance creation' stamp: 'Anonymous 4/11/2019 14:04'!on: unUsuario del: usuarioLogueado	^ self new on: unUsuario  del: usuarioLogueado! !ContenidoComponent subclass: #PreguntaComponent	instanceVariableNames: 'pregunta'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra-WebAplication'!!PreguntaComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/13/2019 15:07'!realizada:unaRespuesta  por:anhtmlcanvasanhtmlcanvas text: 'Respuesta de '.	anhtmlcanvas heading		level: 4;		with: unaRespuesta usuario nombre.! !!PreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/13/2019 15:10'!mostrarLikesYDislikes:anhtmlcanvas de:unaRespuesta	anhtmlcanvas heading		level: 5;		with:			unaRespuesta likes printString , ' likes ' , ' | ' , unaRespuesta dislikes printString				, ' dislikes '.! !!PreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/13/2019 15:11'!contenidoDeRespuesta: unaRespuesta on: anhtmlcanvas	self realizada: unaRespuesta por: anhtmlcanvas.	anhtmlcanvas paragraph: unaRespuesta texto.	self mostrarLikesYDislikes: anhtmlcanvas de: unaRespuesta.	self interactuar: anhtmlcanvas  de:unaRespuesta .	anhtmlcanvas horizontalRule! !!PreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/8/2019 09:14'!initialize	super initialize.! !!PreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 14:06'!on: unaPregunta 	pregunta := unaPregunta.	! !!PreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 17:25'!realizarUnaRespuesta: anhtmlcanvas	anhtmlcanvas anchor		callback: [ self call: (RespuestaComponent on: pregunta del:usuario) ];		with: 'agregar respuesta'! !!PreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 17:48'!renderContentOn: anhtmlcanvas	super renderContentOn: anhtmlcanvas.	self contenidoDe: pregunta on: anhtmlcanvas! !!PreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2019 17:47'!contenidoDe: unaPregunta on: anhtmlcanvas"muestra en pantalla el titulo de la pregunta, el contenido de la misma junto sus respuestas"	anhtmlcanvas heading		level: 3;		with: unaPregunta titulo.	super contenidoDe: unaPregunta On: anhtmlcanvas.	self renderRespuestasOn: anhtmlcanvas! !!PreguntaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 17:40'!renderRespuestasOn: anhtmlcanvas	pregunta respuestas		do: [ :unaRespuesta | self contenidoDeRespuesta: unaRespuesta on: anhtmlcanvas ].	anhtmlcanvas heading		level: 4;		with: 'no hay mas respuestas para la pregunta'.	self realizarUnaRespuesta: anhtmlcanvas! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PreguntaComponent class	instanceVariableNames: ''!!PreguntaComponent class methodsFor: 'initialization' stamp: 'Anonymous 4/11/2019 17:50'!on: unaPregunta delUsuario: unUsuario	^ (self loguearUsuario: unUsuario) on: unaPregunta! !ContenidoComponent subclass: #RespuestaComponent	instanceVariableNames: 'pregunta texto'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra-WebAplication'!!RespuestaComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!RespuestaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 14:07'!on: unaPregunta 	pregunta := unaPregunta.	! !!RespuestaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/12/2019 17:37'!texto^texto! !!RespuestaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/8/2019 09:23'!cancelself answer.! !!RespuestaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/8/2019 09:04'!contenidoDe:unaPregunta on:anhtmlcanvasanhtmlcanvas heading		level: 3;		with: unaPregunta titulo.		super contenidoDe:unaPregunta   On:anhtmlcanvas . ! !!RespuestaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 17:58'!texto:unTextotexto:=unTexto ! !!RespuestaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 18:02'!realizarUnaRespuesta: anhtmlcanvas	anhtmlcanvas		form: [ anhtmlcanvas text: 'agregar respuesta'.			anhtmlcanvas textInput on: #texto of: self.			anhtmlcanvas break.			anhtmlcanvas submitButton 				callback: [ self save ];				value: 'guardar' .			anhtmlcanvas submitButton 				callback: [ self cancel ];				value: 'cancelar' ] ! !!RespuestaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/8/2019 09:42'!renderContentOn:anhtmlcanvassuper renderContentOn: anhtmlcanvas .self contenidoDe:pregunta on:anhtmlcanvas  .self realizarUnaRespuesta:anhtmlcanvas.! !!RespuestaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/6/2019 18:59'!initializesuper initialize.! !!RespuestaComponent methodsFor: 'rendering' stamp: 'Anonymous 4/11/2019 18:01'!save	sistema agregarRespuestaA: pregunta conTexto: texto yUsuario: usuario.	self answer! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RespuestaComponent class	instanceVariableNames: ''!!RespuestaComponent class methodsFor: 'instance creation' stamp: 'Anonymous 4/11/2019 17:59'!on: unaPregunta del: unUsuario	^ (self loguearUsuario: unUsuario) on: unaPregunta! !LoginComponent initialize!Object subclass: #Interaccion	instanceVariableNames: 'fecha usuario likes dislikes'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra'!!Interaccion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 4/5/2019 18:46'!initialize	fecha := DateAndTime now.	likes := OrderedCollection new.	dislikes := OrderedCollection new! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 4/12/2019 18:10'!removerReaccionDe: unUsuario"remueve like o dislike de la pregunta o respuesta del usuario, si habia realizado alguno "	| like dislike |	like := self buscarLikeDe: unUsuario.	like		ifNotNil: [ likes remove: like ];		ifNil: [ dislike := self buscarDislikeDe: unUsuario.			dislike ifNotNil: [ dislikes remove: dislike ] ]! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 00:51'!fecha^fecha.! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 3/28/2019 11:07'!usuario^usuario.! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 4/11/2019 23:26'!buscarDislikeDe: unUsuario	^ dislikes detect: [ :reaccion | reaccion usuario = unUsuario ] ifNone: [ ^ nil ]! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 3/28/2019 11:07'!usuario:unUsuariousuario:=unUsuario .! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 12:26'!dislikes	^ dislikes size! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 12:26'!likes	^ likes size! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 4/11/2019 23:25'!buscarLikeDe:unUsuario.^likes detect:[:reaccion| reaccion usuario = unUsuario]  ifNone:[^nil]. ! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 4/12/2019 18:09'!registrarDislikeDe: unUsuario	"registra dislike si el usuario no lo ha realizado antes. Si habia realizado un like, lo borra."	| dislike like |	(self buscarDislikeDe: unUsuario)		ifNil: [ like := self buscarLikeDe: unUsuario.			like ifNotNil: [ likes remove: like ].			dislike := Reaccion delUsuario: unUsuario.			dislikes add: dislike ]! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 4/12/2019 18:09'!registrarLikeDe: unUsuario"registra like si el usuario no lo ha realizado antes. Si habia realizado un dislike, lo borra."	| dislike like |	(self buscarLikeDe: unUsuario)		ifNil: [ dislike := self buscarDislikeDe: unUsuario.			dislike ifNotNil: [ dislikes remove: dislike ].			like := Reaccion delUsuario: unUsuario.			likes add: like ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Interaccion class	instanceVariableNames: ''!!Interaccion class methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/28/2019 11:08'!conUsuario:unUsuario^self new usuario: unUsuario .! !Interaccion subclass: #Pregunta	instanceVariableNames: 'topicos titulo descripcion respuestas'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra'!!Pregunta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:43'!titulo^titulo.! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 15:43'!agregarUnaRespuesta:unaRespuestarespuestas add: unaRespuesta. ! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 4/12/2019 18:11'!soyInteresPara: unUsuario"si algun topico del usuario recibido coincide con algun topico de la pregunta, devuelve true"	^ (unUsuario topicos intersection: self topicos) size > 0! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 4/12/2019 17:34'!descripcion^descripcion ! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 00:55'!initialize   super initialize .	topicos := Set new.	respuestas := OrderedCollection new! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 4/12/2019 18:10'!respuestas"devuelve una coleccion de respuestas ordenadas por cantidad de likes"	^ respuestas		asSortedCollection: [ :respuesta :respuesta2 | respuesta likes > respuesta2 likes ]! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:42'!agregarTopicos:colTopicostopicos addAll: colTopicos .! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:43'!titulo:unTitulotitulo:=unTitulo .! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 14:02'!agregarLaRespuesta:unTexto delUsuario:unUsuario |respuesta|respuesta:=Respuesta delUsuario:unUsuario   conTexto:unTexto .self agregarUnaRespuesta: respuesta. ^respuesta! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 14:22'!mismoTopico:unTopico^topicos includes:unTopico ! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 4/12/2019 18:25'!soyRelevantePara: unUsuario	"devuelve true si la pregunta le interesa a unUsuario, ya sea por topicos en comun o porque el usuario que realizo la pregunta, es uno de los que unUsuario sigue"	^ ( unUsuario sigoA: self usuario) or: [ self soyInteresPara: unUsuario ]! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 4/12/2019 18:10'!respuestaConUsuario: unUsuario"devuelve las respuestas que realizo unUsuario en la pregunta"	^ respuestas select: [ :respuesta | respuesta usuario = unUsuario ]! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:42'!topicos^topicos.! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:44'!descripcion:unaDescripciondescripcion :=unaDescripcion .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pregunta class	instanceVariableNames: ''!!Pregunta class methodsFor: 'as yet unclassified' stamp: 'Anonymous 4/11/2019 10:55'!delUsuario:unUsuario conTitulo:unTitulo DeLosTopicos:unosTopicos conDescripcion:unaDescripcion^ (self conUsuario: unUsuario )titulo:unTitulo ;agregarTopicos:unosTopicos ;descripcion: unaDescripcion .! !Object subclass: #Reaccion	instanceVariableNames: 'fecha usuario'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra'!!Reaccion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Reaccion methodsFor: 'initialization' stamp: 'Anonymous 4/5/2019 18:47'!initialize	fecha := DateAndTime now! !!Reaccion methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 13:35'!usuario:unUsuariousuario:=unUsuario .! !!Reaccion methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 13:35'!usuario^usuario.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Reaccion class	instanceVariableNames: ''!!Reaccion class methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/27/2019 14:05'!delUsuario:unusuario^self new usuario: unusuario ! !Interaccion subclass: #Respuesta	instanceVariableNames: 'texto'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra'!!Respuesta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Respuesta methodsFor: 'accessing' stamp: 'Anonymous 3/27/2019 13:30'!texto^texto.! !!Respuesta methodsFor: 'accessing' stamp: 'Anonymous 3/27/2019 13:30'!texto:unTextotexto:=unTexto .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Respuesta class	instanceVariableNames: ''!!Respuesta class methodsFor: 'as yet unclassified' stamp: 'Anonymous 4/11/2019 10:55'!delUsuario:unUsuario conTexto:unTexto.^(self conUsuario: unUsuario )texto: unTexto .! !Object subclass: #SistemaCuOOra	instanceVariableNames: 'preguntas topicos usuarios'	classVariableNames: 'instance'	poolDictionaries: ''	category: 'Objetos2-CuOOra'!!SistemaCuOOra commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/12/2019 18:07'!validarUsuario: unNombre y: unaContraseña"valida que el usuario y la contraseña recibida pertenezcan a la de un usuario registrado "	^ usuarios		detect: [ :usuario | usuario esMiNombre: unNombre yMiContraseña: unaContraseña ]		ifNone: [ ^ nil ]! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/14/2019 00:48'!removerReaccionAInteraccion: unaInteraccion DelUsuario: unUsuario	"remueve like o dislike que haya hecho el usuario recibido como parametro de la respuesta recibida "	unaInteraccion  removerReaccionDe: unUsuario! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:44'!agregarTopicoDeInteres:unosTopicos alUsuario:unUsuariounUsuario agregarTopico: unosTopicos ! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/14/2019 01:06'!registrarLikeInteraccion: unaInteraccion delUsuario: unUsuario	unaInteraccion registrarLikeDe: unUsuario! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 15:42'!borrarPregunta:unaPreguntapreguntas remove: unaPregunta.! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/11/2019 18:43'!unUsuario:unUsuario seguirA:otroUsuariounUsuario seguirA:otroUsuario.! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/12/2019 17:17'!agregarPregunta:unTitulo conTopicos:unosTopicos descripcion:unaDescripcion yUsuario:unUsuario|pregunta|pregunta:=Pregunta delUsuario:unUsuario  conTitulo:unTitulo  DeLosTopicos:unosTopicos  conDescripcion:unaDescripcion.self addPregunta: pregunta .  ^pregunta ! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:00'!agregarTopico:unNombre yDescripcion:unaDescripcion|topico|topico:=Topico conNombre:unNombre   yDescripcion:unaDescripcion .topicos add:topico. ^topico! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/12/2019 18:06'!validarSeguidoresDe: unUsuario con: usuarioAseguir"devuelve true si unUsuario sigue a usuarioAseguir "	^ unUsuario sigoA: usuarioAseguir! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 16:50'!crearElUsuario:unNombre conContraseña:unaContraseña |usuario|usuario:=UsuarioCuOOra conNombre:unNombre  yContraseña:unaContraseña .usuarios add: usuario.  ^usuario.! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:02'!obtenerPreguntasDe:unUsuario^preguntas select: [ :pregunta| pregunta usuario = unUsuario  ]! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 21:09'!obtenerRespuestasDe: unUsuario	^ (preguntas collect: [ :coll | coll respuestaConUsuario: unUsuario ]) flattened .! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:16'!agregarRespuestaA:unaPregunta conTexto:unTexto yUsuario:unUsuario|respuesta|respuesta:=unaPregunta agregarLaRespuesta:unTexto   delUsuario:unUsuario . ^respuesta.! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/10/2019 12:57'!addPregunta: unaPreguntapreguntas add:unaPregunta .! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/10/2019 13:28'!obtenerTopicos: unosTopicos^topicos select: [:topico|unosTopicos contains:[:nombreTop| nombreTop = topico nombre]]. ! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/12/2019 18:04'!preguntas"obtiene las ultimas 5 preguntas del sistema, en el caso de no haber 5, devuelve las que tenga la coleccion en ese momento "^ preguntas first: (preguntas size min:5).! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/14/2019 00:48'!registrarDislikeInteraccion: unaInteraccion delUsuario: unUsuario	unaInteraccion  registrarDislikeDe: unUsuario! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 15:21'!obtenerRespuestasAPregunta:unaPregunta^unaPregunta respuestas ! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 15:18'!obtenerPreguntasRelevantesPara:unUsuario^preguntas select: [ :pregunta| pregunta soyRelevantePara:unUsuario  ]! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/11/2019 18:45'!unUsuario:unUsuario dejarDeSeguirA:otroUsuariounUsuario dejarDeSeguirA: otroUsuario ! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/8/2019 09:34'!initialize	usuarios := Set new.	preguntas := SortedCollection sortBlock:[:pregunta1 :pregunta2|pregunta1 fecha >pregunta2 fecha].	topicos := OrderedCollection new! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 14:27'!obtenerPreguntasDelTopico:unTopico^preguntas select: [ :pregunta| pregunta mismoTopico:unTopico ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SistemaCuOOra class	instanceVariableNames: ''!!SistemaCuOOra class methodsFor: 'accessing' stamp: 'Anonymous 4/14/2019 01:02'!instance	| diego juan pedro pregDiego rtaDiego pregPedro rtaPedro TestDeUnidad smalltalk OO1 sistema |	instance		ifNil: [sistema := SistemaCuOOra new.	" Usuarios: pedro@cuoora.com, diego@cuoora.com, juan@cuoora.com con contraseñas idénticas al nombre de usuario. No hay relaciones de followers  entre ellos"	pedro := sistema crearElUsuario: 'pedro@CuOOra.com' conContraseña: 'pedro@CuOOra.com'.	diego := sistema crearElUsuario: 'diego@CuOOra.com' conContraseña: 'diego@CuOOra.com'.	juan := sistema crearElUsuario: 'juan@CuOOra.com' conContraseña: 'juan@CuOOra.com'.	"agregamos topicos de interes a los usuarios"	OO1 := sistema agregarTopico: 'OO1' yDescripcion: 'orientacion a objetos 1'.	TestDeUnidad := sistema agregarTopico: 'test De Unidad' yDescripcion: 'como hacer los test'.	smalltalk := sistema agregarTopico: 'Smalltalk' yDescripcion: 'lenguaje de programacion'.	sistema agregarTopicoDeInteres: (OrderedCollection with: OO1 with: TestDeUnidad) alUsuario: pedro.	sistema agregarTopicoDeInteres: (OrderedCollection with: OO1 with: smalltalk) alUsuario: diego.	"- Preguntas y respuestas: 		- Pregunta de Pedro:  	- ¿Para qué sirve el método SetUp? 	- Tópicos: OO1, Test de unidad. "	pregPedro := sistema		agregarPregunta: 'para que sirve el metodo setUp?'		conTopicos: (OrderedCollection with: OO1 with: TestDeUnidad)		descripcion: 'como hacer test'		yUsuario: pedro.	"	- Respuesta de Diego: Sirve para instanciar los objetos que son evaluados por el test en un único método y que se ejecute siempre antes de cada test. "	rtaDiego := sistema		agregarRespuestaA: pregPedro		conTexto: 'sirve para instanciar los objetos que son evaluados por el test en un unico metodo y que se ejecute siempre antes de cada test'		yUsuario: diego.	"	- Pregunta de Diego:  	- ¿Qué significa #messageNotUnderstood? 	- Tópicos: OO1, Smalltalk. "	pregDiego := sistema		agregarPregunta: 'que significa #message not understood?'		conTopicos: (OrderedCollection with: OO1 with: smalltalk)		descripcion: 'mensaje de smalltalk'		yUsuario: diego.	" - Respuesta de Pedro: Significa que el objeto que recibió el mensaje no encontró ningún método para ejecutar en respuesta."	rtaPedro := sistema		agregarRespuestaA: pregDiego		conTexto: 'significa que el objeto que recibio el mensaje no encontro ningun metodo para ejecutar en respuesta'		yUsuario: pedro.	instance := sistema].	^ instance! !Object subclass: #Topico	instanceVariableNames: 'nombre descripcion'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra'!!Topico commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	descripcion:		<Object>	nombre:		<Object>    Implementation Points!!Topico methodsFor: 'accessing' stamp: 'Anonymous 3/27/2019 03:20'!descripcion:unaDescripciondescripcion :=unaDescripcion .! !!Topico methodsFor: 'accessing' stamp: 'Anonymous 3/27/2019 03:20'!nombre:unNombrenombre:=unNombre .! !!Topico methodsFor: 'accessing' stamp: 'Anonymous 3/27/2019 03:20'!nombre^nombre .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topico class	instanceVariableNames: ''!!Topico class methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/27/2019 03:21'!conNombre:unNombre yDescripcion:unaDescripcion^self new nombre: unNombre ;descripcion: unaDescripcion .! !Object subclass: #UsuarioCuOOra	instanceVariableNames: 'followers topicos nombre contraseña fecha'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra'!!UsuarioCuOOra commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	contraseña:		<Object>	fecha:		<Object>	followers:		<Object>	nombre:		<Object>	topicos:		<Object>    Implementation Points!!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/5/2019 18:47'!initialize	topicos := Set new.	followers := OrderedCollection new.	fecha := DateAndTime now.! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/12/2019 17:24'!esMiNombre: unNombre yMiContraseña: unaContraseña	^nombre = unNombre and: contraseña = unaContraseña! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:15'!nombre^nombre.! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:44'!agregarTopico:unosTopicostopicos addAll:unosTopicos ! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:15'!nombre:unNombrenombre:=unNombre.! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/11/2019 18:42'!dejarDeSeguirA:unUsuariofollowers remove: unUsuario ! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/11/2019 18:50'!sigoA: unUsuario	^ followers includes: unUsuario! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 14:57'!topicos^topicos! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:17'!seguirA:unUsuariofollowers add:unUsuario .! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:16'!contraseña:unaContraseñacontraseña:=unaContraseña .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UsuarioCuOOra class	instanceVariableNames: ''!!UsuarioCuOOra class methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/27/2019 03:19'!conNombre:unNombre yContraseña:unaContraseña ^self new nombre: unNombre ;contraseña: unaContraseña .! !TestCase subclass: #TestPregunta	instanceVariableNames: 'usuarioPreg usuarioRta1 usuarioRta2 topico1 topico2 pregunta rta1 rta2'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra-Test'!!TestPregunta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	pregunta:		<Object>	rta1:		<Object>	rta2:		<Object>	topico1:		<Object>	topico2:		<Object>	usuarioPreg:		<Object>	usuarioRta1:		<Object>	usuarioRta2:		<Object>    Implementation Points!!TestPregunta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:34'!testBuscarDislikeDeself assert:( pregunta buscarDislikeDe: usuarioRta1 )= nil.pregunta registrarDislikeDe: usuarioRta1. self deny: (pregunta buscarDislikeDe: usuarioRta1 )=nil! !!TestPregunta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:33'!testAgregarTopicos|topico|topico:= Topico conNombre: 'cena' yDescripcion:'comida para la noche'.pregunta agregarTopicos: (OrderedCollection with: topico).self assert:( pregunta mismoTopico: topico) ! !!TestPregunta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:41'!testSoyRelevanteParaself deny:(pregunta soyRelevantePara: usuarioRta1 ) .usuarioRta1  seguirA: usuarioPreg .self assert: (pregunta soyRelevantePara: usuarioRta1 )! !!TestPregunta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:35'!testBuscarLikeDe	self assert: (pregunta buscarLikeDe: usuarioRta1) = nil.	pregunta registrarLikeDe: usuarioRta1.	self deny: (pregunta buscarLikeDe: usuarioRta1) = nil! !!TestPregunta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:41'!testRemoverReaccionDe	pregunta registrarLikeDe: usuarioRta1.	pregunta removerReaccionDe: usuarioRta1.	self assert: (pregunta buscarLikeDe: usuarioRta1) = nil! !!TestPregunta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:39'!testRespuestas"hay dos respuestas cargadas. El metodo las ordena de mayor cantidad de likes a menor"self assert: (pregunta respuestas includes: rta1 ).rta1 registrarLikeDe: usuarioPreg .self deny: (pregunta respuestas first )=rta2 ! !!TestPregunta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:32'!setUpusuarioPreg:= UsuarioCuOOra conNombre: 'Jimena' yContraseña: '123456'.usuarioRta1:= UsuarioCuOOra conNombre: 'Nahuel' yContraseña: '1234'.usuarioRta2:= UsuarioCuOOra conNombre: 'Ramiro' yContraseña: '333'.topico1:= Topico conNombre: 'deportes' yDescripcion:'futbol, natacion, otros' .topico2:= Topico conNombre: 'comida' yDescripcion: 'pizza, empanadas, otros'.pregunta:= Pregunta delUsuario: usuarioPreg conTitulo:'que puedo comer hoy?'  DeLosTopicos:(OrderedCollection with: topico2)  conDescripcion:'para 5 personas'.rta1:= pregunta agregarLaRespuesta: 'milanesa con pure!! ' delUsuario: usuarioRta1.rta2:= pregunta agregarLaRespuesta: 'salmon rosada con ensalada' delUsuario: usuarioRta2! !!TestPregunta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:40'!testSoyInteresParaself deny: (pregunta soyInteresPara: usuarioRta1 ).usuarioRta1 agregarTopico: (OrderedCollection with: topico2 ).self assert: (pregunta soyInteresPara: usuarioRta1 )! !!TestPregunta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:36'!testMismoTopico"el topico2 (comida) esta en la coleccion, mientras que el topico1 (deportes) no."self assert: (pregunta mismoTopico: topico2 ). self deny: (pregunta mismoTopico: topico1).! !!TestPregunta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:43'!testRespuestaConUsuario	self		assert: (pregunta respuestaConUsuario: usuarioRta1 )size		equals: 1.	self		deny: (pregunta respuestaConUsuario: usuarioPreg )size = 1! !TestCase subclass: #TestRespuesta	instanceVariableNames: 'usuarioRespuesta usuarioLike respuesta'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra-Test'!!TestRespuesta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TestRespuesta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:26'!testBuscarDislikeDe"el usuario no ha reaizado dislike aun"self assert: (respuesta buscarDislikeDe: usuarioLike ) = nil! !!TestRespuesta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:28'!testRemoverReaccionDerespuesta registrarLikeDe: usuarioLike .respuesta removerReaccionDe: usuarioLike .self assert: (respuesta buscarLikeDe: usuarioLike ) = nil! !!TestRespuesta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:27'!testRegistrarDislikeDeself assert: respuesta dislikes equals:0.respuesta registrarDislikeDe: usuarioLike .self assert: respuesta dislikes equals:1! !!TestRespuesta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:26'!testBuscarLikeDe	"el usuario no ha reaizado like aun"	self assert: (respuesta buscarLikeDe: usuarioLike) = nil! !!TestRespuesta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:28'!testRegistrarLikeDe	self assert: respuesta likes equals: 0.	respuesta registrarLikeDe: usuarioLike.	self assert: respuesta likes equals: 1! !!TestRespuesta methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:25'!setUpusuarioRespuesta:= UsuarioCuOOra conNombre: 'Nahuel' yContraseña: '123456'.usuarioLike:= UsuarioCuOOra conNombre: 'Jimena' yContraseña: '456789'.respuesta:= Respuesta delUsuario: usuarioRespuesta conTexto:'la mejor respuesta'. ! !TestCase subclass: #TestSistemaCuOOra	instanceVariableNames: 'sistemaCuOOra usuario1 usuario2 usuario3 topico1 topico2 topico3 preg1 preg2 preg3 preg4 rta1 rta2 rta3 rta4'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra-Test'!!TestSistemaCuOOra commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 19:45'!testRegistraDislikeAPregunta"un usuario no puede dar mas de un dislike a una pregunta "	sistemaCuOOra registrarDislikeApregunta: preg1 delUsuario: usuario1.	self assert: preg1 dislikes equals: 1.	sistemaCuOOra registrarDislikeApregunta: preg1 delUsuario: usuario1.	self deny: preg1 dislikes = 2! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/4/2019 19:30'!testPreguntas	| col col2 |	col := sistemaCuOOra preguntas.	col2 := col first topicos.	self		assert: (col2 contains: [ :topico | topico nombre = 'ciencia' ]) = true! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:32'!testObtenerPreguntasDe|pregunta|self assert: (sistemaCuOOra obtenerPreguntasDe:usuario1) size equals:2.  pregunta:=sistemaCuOOra agregarPregunta:'que es la interseccion'  conTopicos:(OrderedCollection with: topico1 ) descripcion:'alta preg'  yUsuario:usuario2.self deny: ((sistemaCuOOra obtenerPreguntasDe: usuario1) includes:pregunta)=true.   ! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 21:12'!testObtenerRespuestasDeself deny:(( sistemaCuOOra obtenerRespuestasDe: usuario1 ) includes:preg1).self assert: (sistemaCuOOra obtenerRespuestasDe: usuario2)size equals: 2.! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 19:40'!testBorrarPregunta "hay cuatro preguntas cargadas. El metodo devuelve las primeras cinco preguntas "self assert: (sistemaCuOOra preguntas includes: preg1 ). sistemaCuOOra borrarPregunta: preg1. self deny: (sistemaCuOOra preguntas includes: preg1 )! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 19:55'!testValidarUsuarioyself assert: (sistemaCuOOra validarUsuario: 'nahuel' y:'123456' ) = usuario1 .self deny: (sistemaCuOOra validarUsuario: 'nahuel' y:'555' ) = usuario1 .! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:46'!testObtenerPreguntasRelevantesParaself assert: (sistemaCuOOra obtenerPreguntasRelevantesPara:usuario1) size equals:3.self assert: ((sistemaCuOOra obtenerPreguntasRelevantesPara: usuario2) includes:preg1) .! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:35'!testObtenerPreguntasDelTopicoself assert: (sistemaCuOOra obtenerPreguntasDelTopico:topico1) size equals:1.self assert: (sistemaCuOOra obtenerPreguntasDelTopico:topico2) size equals:3. ! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 21:04'!testObtenerRespuestasAPregunta|resp|self assert:( sistemaCuOOra obtenerRespuestasAPregunta: preg1 ) size equals: 2.resp:=sistemaCuOOra agregarRespuestaA: preg1 conTexto:'para probar'  yUsuario:usuario3.self assert: ((sistemaCuOOra obtenerRespuestasAPregunta:preg1)includes:resp)! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 19:43'!testObtenerTopicos|nombreTopicos|nombreTopicos := OrderedCollection with: 'deportes' with:'ciencia'  with:'comida'.self assert: (sistemaCuOOra obtenerTopicos: nombreTopicos )size equals: 2.self deny: ((sistemaCuOOra obtenerTopicos: nombreTopicos ) contains: [ :topico| topico nombre = 'comida' ])! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:42'!setUpsistemaCuOOra :=SistemaCuOOra new.usuario1:=sistemaCuOOra crearElUsuario:'nahuel'  conContraseña:'123456'.usuario2:=sistemaCuOOra crearElUsuario: 'jimena' conContraseña:'78910'.usuario3 :=sistemaCuOOra crearElUsuario: 'roberto' conContraseña:'111213' .topico1 :=sistemaCuOOra agregarTopico:'deportes'  yDescripcion:'futbol tennis basket entre otras'.topico2 :=sistemaCuOOra agregarTopico:'ciencia'  yDescripcion:'biologia quimica exactas informatica'.topico3 :=sistemaCuOOra agregarTopico: 'tecnologia' yDescripcion:'electrodomesticos computadoras celulares '.sistemaCuOOra agregarTopicoDeInteres:(OrderedCollection with:topico1  with:topico2 )  alUsuario:usuario2. sistemaCuOOra agregarTopicoDeInteres:(OrderedCollection with:topico2  with:topico3 )  alUsuario:usuario1.    sistemaCuOOra agregarTopicoDeInteres:(OrderedCollection with: topico1)  alUsuario:usuario3.preg1:=sistemaCuOOra agregarPregunta:'messi?'  conTopicos:(OrderedCollection with:topico1)   descripcion: 'el mejor jugador' yUsuario:usuario1 .    preg2:=sistemaCuOOra agregarPregunta:'que procesador tiene el xiaomi redmi6?'  conTopicos:(OrderedCollection with:topico2 with:topico3)   descripcion: 'celular gama media' yUsuario:usuario2 .    preg3:=sistemaCuOOra agregarPregunta:'cuanto equivale 1 pulgada?'  conTopicos:(OrderedCollection with:topico2 with:topico3)   descripcion: 'en cm ' yUsuario:usuario1 .preg4 :=sistemaCuOOra agregarPregunta:'2*6?'  conTopicos:(OrderedCollection with:topico2 )  descripcion:'cuanto da'  yUsuario:usuario2.rta1:=sistemaCuOOra agregarRespuestaA:preg1  conTexto:'el mejor de todos'  yUsuario:usuario3 .rta2:=sistemaCuOOra agregarRespuestaA:preg1  conTexto:'despues de maradona'  yUsuario:usuario2 .rta3:=sistemaCuOOra agregarRespuestaA: preg2 conTexto:'octacore 2.0'  yUsuario:usuario3.rta4 :=sistemaCuOOra agregarRespuestaA: preg3 conTexto:'2.54'  yUsuario:usuario2.  ! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 19:46'!testRegistraDislikeARespuesta	"un usuario no puede dar mas de un dislike a una respuesta "	sistemaCuOOra registrarDislikeArespuesta: rta1  delUsuario: usuario1.	self assert: rta1  dislikes equals: 1.	sistemaCuOOra registrarDislikeArespuesta: rta1  delUsuario: usuario1.	self deny: rta1  dislikes = 2! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 19:49'!testRemoverInteraccionDeLaPreguntaDelUsuario	sistemaCuOOra registrarLikeApregunta: preg2 delUsuario: usuario1.	sistemaCuOOra removerInteraccionDeLaPregunta: preg2 DelUsuario: usuario1.	self assert: (preg2 buscarLikeDe: usuario1) equals: nil! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 19:52'!testUnUsuarioDejarDeSeguirA"se testea: unUsuario seguirA, validarSeguidoresDe con , unUsuario dejarDeSeguirA "sistemaCuOOra unUsuario: usuario1  seguirA:usuario2 .self assert: (sistemaCuOOra validarSeguidoresDe: usuario1  con: usuario2 ).sistemaCuOOra unUsuario: usuario1  dejarDeSeguirA: usuario2 .self deny: (sistemaCuOOra validarSeguidoresDe: usuario1  con: usuario2 ). ! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 19:47'!testRegistraLikeAPregunta	"un usuario no puede dar mas de un like a una pregunta "	sistemaCuOOra registrarLikeApregunta: preg1 delUsuario: usuario1.	self assert: preg1 likes equals: 1.	sistemaCuOOra registrarLikeApregunta: preg1 delUsuario: usuario1.	self deny: preg1 likes = 2! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 19:47'!testRegistraLikeARespuesta	"un usuario no puede dar mas de un like a una respuesta "	sistemaCuOOra registrarLikeArespuesta: rta1  delUsuario: usuario1.	self assert: rta1  likes equals: 1.	sistemaCuOOra registrarLikeArespuesta: rta1  delUsuario: usuario1.	self deny: rta1  likes = 2! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 19:49'!testRemoverInteraccionDeLaRespuestaDelUsuariosistemaCuOOra registrarLikeArespuesta: rta2  delUsuario:usuario1.sistemaCuOOra removerInteraccionDeLaRespues: rta2  DelUsuario:  usuario1 .self assert: (rta2 buscarLikeDe: usuario1 ) equals: nil.! !TestCase subclass: #TestUsuarioCuOOra	instanceVariableNames: 'usuario1 usuario2 topic1'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra-Test'!!TestUsuarioCuOOra commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TestUsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:22'!testAgregarTopico	usuario1 agregarTopico: (OrderedCollection with: topic1).	self assert: (usuario1 topicos includes: topic1)! !!TestUsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:17'!testDejarDeSeguirA	usuario1 seguirA: usuario2 .	self assert: (usuario1 sigoA: usuario2 ).	usuario1 dejarDeSeguirA: usuario2 .	self deny:(usuario1 sigoA: usuario2 )! !!TestUsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:20'!testSeguirA	self deny: (usuario1 sigoA: usuario2 ).	usuario1 seguirA: usuario2 .	self assert:(usuario1 sigoA: usuario2 ).! !!TestUsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:21'!testSigoA"no se siguen ninguno de los usuarios"	self deny: (usuario1 sigoA: usuario2)! !!TestUsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:23'!setUp	usuario1 := UsuarioCuOOra		conNombre: 'lucia@cuoora.com'		yContraseña: '1313'.	usuario2 := UsuarioCuOOra		conNombre: 'carla@cuoora.com'		yContraseña: '2332'.	topic1 := Topico		conNombre: 'deportes'		yDescripcion: 'futbol,tenis,otros'.	! !!TestUsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2019 21:21'!testEsMiNombreYMiContraseña	self		assert: (usuario1 esMiNombre: 'lucia@cuoora.com' yMiContraseña: '1313').	self		deny: (usuario2 esMiNombre: 'carla@cuoora.com' yMiContraseña: '124141')! !		LoginComponent initialize .WAAdmin register: LoginComponent   asApplicationAt: 'CuOOra/Login'