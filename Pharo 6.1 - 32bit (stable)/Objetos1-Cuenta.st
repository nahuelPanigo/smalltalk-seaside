Object subclass: #Cuenta	instanceVariableNames: 'saldo'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-Cuenta'!!Cuenta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Cuenta methodsFor: 'initialization' stamp: 'Anonymous 10/5/2018 09:30'!puedeExtraer: monto^ ((saldo-monto)>0).  ! !!Cuenta methodsFor: 'initialization' stamp: 'Anonymous 10/5/2018 09:28'!extraer: monto(self puedeExtraer: monto) ifTrue:[self extraerSinControlar: monto.^true].^false! !!Cuenta methodsFor: 'initialization' stamp: 'Anonymous 10/5/2018 09:34'!trasferir:monto a:cuentaDestino(self puedeExtraer: monto)ifTrue:[self extraerSinControlar: monto.	cuentaDestino depositar: monto .^true ].^false.  ! !!Cuenta methodsFor: 'initialization' stamp: 'Anonymous 10/5/2018 09:24'!saldo^saldo.! !!Cuenta methodsFor: 'initialization' stamp: 'Anonymous 10/5/2018 09:25'!depositar: montosaldo := saldo+ monto! !!Cuenta methodsFor: 'initialization' stamp: 'Anonymous 10/5/2018 09:24'!initialize saldo := -0.! !!Cuenta methodsFor: 'initialization' stamp: 'Anonymous 10/5/2018 09:26'!extraerSinControlar: montosaldo := saldo-monto.! !Cuenta subclass: #CajaDeAhorro	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-Cuenta'!!CajaDeAhorro commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!CajaDeAhorro methodsFor: 'initialization' stamp: 'Anonymous 10/5/2018 10:43'!transferir: monto a:unaCuenta(self puedeExtraer: monto )ifTrue: [super extraer: (monto+(monto*0.02)) .unaCuenta depositar: monto]! !!CajaDeAhorro methodsFor: 'initialization' stamp: 'Anonymous 10/5/2018 10:10'!puedeExtraer: monto^super puedeExtraer: (monto+ (monto*0.02))! !!CajaDeAhorro methodsFor: 'initialization' stamp: 'Anonymous 10/5/2018 10:34'!extraer: monto(self puedeExtraer: monto )ifTrue: [super extraer: (monto+(monto*0.02)) .^true] .^false.! !Cuenta subclass: #CuentaCorriente	instanceVariableNames: 'limite'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-Cuenta'!!CuentaCorriente commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!CuentaCorriente methodsFor: 'initialization' stamp: 'Anonymous 10/5/2018 09:40'!initializelimite := 0.! !!CuentaCorriente methodsFor: 'initialization' stamp: 'Anonymous 10/5/2018 09:51'!puedeExtraer: monto^((saldo-monto)>limite )! !!CuentaCorriente methodsFor: 'as yet unclassified' stamp: 'Anonymous 10/5/2018 09:38'!limiteDescubierto^limite.! !!CuentaCorriente methodsFor: 'as yet unclassified' stamp: 'Anonymous 10/5/2018 09:37'!limiteDescubierto: unLimitelimite := unLimite! !