TestCase subclass: #TestSistemaCuOOra	instanceVariableNames: 'sistemaCuOOra usuario1 usuario2 usuario3 topico1 topico2 topico3 preg1 preg2 preg3 preg4 rta1 rta2 rta3 rta4'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra-Test'!!TestSistemaCuOOra commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:46'!testObtenerPreguntasRelevantesParaself assert: (sistemaCuOOra obtenerPreguntasRelevantesPara:usuario1) size equals:3.self assert: ((sistemaCuOOra obtenerPreguntasRelevantesPara: usuario2) includes:preg1) .! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:32'!testObtenerPreguntasDe|pregunta|self assert: (sistemaCuOOra obtenerPreguntasDe:usuario1) size equals:2.  pregunta:=sistemaCuOOra agregarPregunta:'que es la interseccion'  conTopicos:(OrderedCollection with: topico1 ) descripcion:'alta preg'  yUsuario:usuario2.self deny: ((sistemaCuOOra obtenerPreguntasDe: usuario1) includes:pregunta)=true.   ! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 21:04'!testObtenerRespuestasAPregunta|resp|self assert:( sistemaCuOOra obtenerRespuestasAPregunta: preg1 ) size equals: 2.resp:=sistemaCuOOra agregarRespuestaA: preg1 conTexto:'para probar'  yUsuario:usuario3.self assert: ((sistemaCuOOra obtenerRespuestasAPregunta:preg1)includes:resp)! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:35'!testObtenerPreguntasDelTopicoself assert: (sistemaCuOOra obtenerPreguntasDelTopico:topico1) size equals:1.self assert: (sistemaCuOOra obtenerPreguntasDelTopico:topico2) size equals:3. ! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:42'!setUpsistemaCuOOra :=SistemaCuOOra new.usuario1:=sistemaCuOOra crearElUsuario:'nahuel'  conContraseña:'123456'.usuario2:=sistemaCuOOra crearElUsuario: 'jimena' conContraseña:'78910'.usuario3 :=sistemaCuOOra crearElUsuario: 'roberto' conContraseña:'111213' .topico1 :=sistemaCuOOra agregarTopico:'deportes'  yDescripcion:'futbol tennis basket entre otras'.topico2 :=sistemaCuOOra agregarTopico:'ciencia'  yDescripcion:'biologia quimica exactas informatica'.topico3 :=sistemaCuOOra agregarTopico: 'tecnologia' yDescripcion:'electrodomesticos computadoras celulares '.sistemaCuOOra agregarTopicoDeInteres:(OrderedCollection with:topico1  with:topico2 )  alUsuario:usuario2. sistemaCuOOra agregarTopicoDeInteres:(OrderedCollection with:topico2  with:topico3 )  alUsuario:usuario1.    sistemaCuOOra agregarTopicoDeInteres:(OrderedCollection with: topico1)  alUsuario:usuario3.preg1:=sistemaCuOOra agregarPregunta:'messi?'  conTopicos:(OrderedCollection with:topico1)   descripcion: 'el mejor jugador' yUsuario:usuario1 .    preg2:=sistemaCuOOra agregarPregunta:'que procesador tiene el xiaomi redmi6?'  conTopicos:(OrderedCollection with:topico2 with:topico3)   descripcion: 'celular gama media' yUsuario:usuario2 .    preg3:=sistemaCuOOra agregarPregunta:'cuanto equivale 1 pulgada?'  conTopicos:(OrderedCollection with:topico2 with:topico3)   descripcion: 'en cm ' yUsuario:usuario1 .preg4 :=sistemaCuOOra agregarPregunta:'2*6?'  conTopicos:(OrderedCollection with:topico2 )  descripcion:'cuanto da'  yUsuario:usuario2.rta1:=sistemaCuOOra agregarRespuestaA:preg1  conTexto:'el mejor de todos'  yUsuario:usuario3 .rta2:=sistemaCuOOra agregarRespuestaA:preg1  conTexto:'despues de maradona'  yUsuario:usuario2 .rta3:=sistemaCuOOra agregarRespuestaA: preg2 conTexto:'octacore 2.0'  yUsuario:usuario3.rta4 :=sistemaCuOOra agregarRespuestaA: preg3 conTexto:'2.54'  yUsuario:usuario2.  ! !!TestSistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 21:12'!testObtenerRespuestasDeself deny:(( sistemaCuOOra obtenerRespuestasDe: usuario1 ) includes:preg1).self assert: (sistemaCuOOra obtenerRespuestasDe: usuario2)size equals: 2.! !Object subclass: #Interaccion	instanceVariableNames: 'fecha usuario likes dislikes'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra'!!Interaccion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 3/28/2019 11:07'!usuario^usuario.! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 3/28/2019 11:07'!usuario:unUsuariousuario:=unUsuario .! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 3/28/2019 11:15'!registrarLikeDe: unUsuario	| like |	like := Reaccion delUsuario: unUsuario.	likes add: like! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 12:26'!dislikes	^ dislikes size! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 3/28/2019 11:16'!registrarDislikeDe:unUsuario|dislike|dislike:= Reaccion delUsuario: unUsuario .dislikes add: dislike! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 00:51'!fecha^fecha.! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 12:26'!likes	^ likes size! !!Interaccion methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 00:54'!initialize	fecha := Date today.	likes := OrderedCollection new.	dislikes := OrderedCollection new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Interaccion class	instanceVariableNames: ''!!Interaccion class methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/28/2019 11:08'!conUsuario:unUsuario^self new usuario: unUsuario .! !Interaccion subclass: #Pregunta	instanceVariableNames: 'topicos titulo descripcion respuestas'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra'!!Pregunta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:44'!descripcion:unaDescripciondescripcion :=unaDescripcion .! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:42'!agregarTopicos:colTopicostopicos addAll: colTopicos .! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 14:22'!mismoTopico:unTopico^topicos includes:unTopico ! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 21:01'!respuestas	^ respuestas asSortedCollection: [ :respuesta :respuesta2| respuesta likes size>respuesta2 likes size ].! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:43'!titulo^titulo.! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:40'!soyInteresPara:unUsuario^(unUsuario topicos intersection: self topicos) size >0! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 14:02'!agregarLaRespuesta:unTexto delUsuario:unUsuario |respuesta|respuesta:=Respuesta delUsuario:unUsuario   conTexto:unTexto .self agregarUnaRespuesta: respuesta. ^respuesta! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:44'!descripcion^descripcion .! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:42'!topicos^topicos.! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:43'!titulo:unTitulotitulo:=unTitulo .! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 15:43'!agregarUnaRespuesta:unaRespuestarespuestas add: unaRespuesta. ! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:04'!soyRelevantePara:unUsuario^(self usuario meInteresa: unUsuario  ) or:[self soyInteresPara:unUsuario].! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 00:55'!initialize   super initialize .	topicos := Set new.	respuestas := OrderedCollection new! !!Pregunta methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 19:52'!respuestaConUsuario:unUsuario^respuestas select: [ :respuesta| respuesta usuario = unUsuario  ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pregunta class	instanceVariableNames: ''!!Pregunta class methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/27/2019 13:40'!delUsuario:unUsuario conTitulo:unTitulo DeLosTopicos:unosTopicos conDescripcion:unaDescripcion^self new usuario:unUsuario ;titulo:unTitulo ;agregarTopicos:unosTopicos ;descripcion: unaDescripcion .! !Object subclass: #Reaccion	instanceVariableNames: 'fecha usuario'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra'!!Reaccion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Reaccion methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 13:33'!initializefecha :=DateAndTime today .! !!Reaccion methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 13:35'!usuario^usuario.! !!Reaccion methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 13:35'!usuario:unUsuariousuario:=unUsuario .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Reaccion class	instanceVariableNames: ''!!Reaccion class methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/27/2019 14:05'!delUsuario:unusuario^self new usuario: unusuario ! !Interaccion subclass: #Respuesta	instanceVariableNames: 'texto'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra'!!Respuesta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Respuesta methodsFor: 'accessing' stamp: 'Anonymous 3/27/2019 13:30'!texto^texto.! !!Respuesta methodsFor: 'accessing' stamp: 'Anonymous 3/27/2019 13:30'!texto:unTextotexto:=unTexto .! !!Respuesta methodsFor: 'accessing' stamp: 'Anonymous 3/27/2019 15:30'!likes^likes ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Respuesta class	instanceVariableNames: ''!!Respuesta class methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/27/2019 13:37'!delUsuario:unUsuario conTexto:unTexto.^self new usuario:unUsuario ;texto: unTexto .! !Object subclass: #SistemaCuOOra	instanceVariableNames: 'preguntas topicos usuarios'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra'!!SistemaCuOOra commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 15:21'!obtenerRespuestasAPregunta:unaPregunta^unaPregunta respuestas ! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 15:42'!borrarPregunta:unaPreguntapreguntas remove: unaPregunta.! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 14:27'!obtenerPreguntasDelTopico:unTopico^preguntas select: [ :pregunta| pregunta mismoTopico:unTopico ].! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:44'!agregarTopicoDeInteres:unosTopicos alUsuario:unUsuariounUsuario agregarTopico: unosTopicos ! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/3/2019 00:50'!initialize	usuarios := OrderedCollection new.	preguntas := SortedCollection sortBlock:[:pregunta1 :pregunta2|pregunta1 fecha >pregunta2 fecha].	topicos := OrderedCollection new! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:09'!registrarLikeApregunta:unaPregunta delUsuario:unUsuario unaPregunta registrarLikeDe:  unUsuario .! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:09'!registrarLikeArespuesta:unaRespuesta delUsuario:unUsuario unaRespuesta  registrarLikeDe:  unUsuario .! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 21:09'!obtenerRespuestasDe: unUsuario	^ (preguntas collect: [ :coll | coll respuestaConUsuario: unUsuario ]) flattened .! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:02'!obtenerPreguntasDe:unUsuario^preguntas select: [ :pregunta| pregunta usuario = unUsuario  ]! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 15:18'!obtenerPreguntasRelevantesPara:unUsuario^preguntas select: [ :pregunta| pregunta soyRelevantePara:unUsuario  ]! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:08'!registrarDislikeApregunta:unaPregunta delUsuario:unUsuario unaPregunta registrarDislikeDe:unUsuario ! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:00'!agregarTopico:unNombre yDescripcion:unaDescripcion|topico|topico:=Topico conNombre:unNombre   yDescripcion:unaDescripcion .topicos add:topico. ^topico! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 14:02'!agregarPregunta:unTitulo conTopicos:unosTopicos descripcion:unaDescripcion yUsuario:unUsuario|pregunta|pregunta:=Pregunta delUsuario:unUsuario  conTitulo:unTitulo  DeLosTopicos:unosTopicos  conDescripcion:unaDescripcion.preguntas add:pregunta.  ^pregunta ! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 16:50'!crearElUsuario:unNombre conContraseña:unaContraseña |usuario|usuario:=UsuarioCuOOra conNombre:unNombre  yContraseña:unaContraseña .usuarios add: usuario.  ^usuario.! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/4/2019 00:29'!preguntas|col|col:= OrderedCollection new.preguntas asArray from:1 to:3  do:[:preg| col add: preg ]. ^col.! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:09'!registrarDislikeArespuesta:unaRespuesta delUsuario:unUsuario unaRespuesta  registrarDislikeDe:unUsuario ! !!SistemaCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:16'!agregarRespuestaA:unaPregunta conTexto:unTexto yUsuario:unUsuario|respuesta|respuesta:=unaPregunta agregarLaRespuesta:unTexto   delUsuario:unUsuario . ^respuesta.! !Object subclass: #Topico	instanceVariableNames: 'nombre descripcion'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra'!!Topico commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	descripcion:		<Object>	nombre:		<Object>    Implementation Points!!Topico methodsFor: 'accessing' stamp: 'Anonymous 3/27/2019 03:20'!nombre^nombre .! !!Topico methodsFor: 'accessing' stamp: 'Anonymous 3/27/2019 03:20'!descripcion:unaDescripciondescripcion :=unaDescripcion .! !!Topico methodsFor: 'accessing' stamp: 'Anonymous 3/27/2019 03:20'!descripcion^descripcion .! !!Topico methodsFor: 'accessing' stamp: 'Anonymous 3/27/2019 03:20'!nombre:unNombrenombre:=unNombre .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topico class	instanceVariableNames: ''!!Topico class methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/27/2019 03:21'!conNombre:unNombre yDescripcion:unaDescripcion^self new nombre: unNombre ;descripcion: unaDescripcion .! !Object subclass: #UsuarioCuOOra	instanceVariableNames: 'followers topicos nombre contraseña fecha'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos2-CuOOra'!!UsuarioCuOOra commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	contraseña:		<Object>	fecha:		<Object>	followers:		<Object>	nombre:		<Object>	topicos:		<Object>    Implementation Points!!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:16'!contraseña:unaContraseñacontraseña:=unaContraseña .! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:15'!nombre^nombre.! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:44'!agregarTopico:unosTopicostopicos addAll:unosTopicos ! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/1/2019 20:07'!initializetopicos :=Set new.followers :=OrderedCollection new.fecha := Date today.! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 14:57'!topicos^topicos! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:15'!nombre:unNombrenombre:=unNombre.! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 14:29'!meInteresa:unUsuario^followers includes: unUsuario ! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:16'!contraseña^contraseña .! !!UsuarioCuOOra methodsFor: 'initialization' stamp: 'Anonymous 3/27/2019 03:17'!seguirA:unUsuariofollowers add:unUsuario .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UsuarioCuOOra class	instanceVariableNames: ''!!UsuarioCuOOra class methodsFor: 'as yet unclassified' stamp: 'Anonymous 3/27/2019 03:19'!conNombre:unNombre yContraseña:unaContraseña ^self new nombre: unNombre ;contraseña: unaContraseña .! !